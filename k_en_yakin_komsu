import numpy as np

# Verilen gözlem tablosunu bu şekilde gösteriyoruz.
veriler = np.array([
    #Maaş   MaaşBeklentisi  MutlulukTahmini
    [2000,  4000,           'mutlu değil'],
    [5000,  4300,           'mutlu'],
    [3000,  2900,           'mutlu'],
    [4000,  10000,          'mutlu değil'],
    [5000,  8000,           'mutlu değil'],
    [6000,  3000,           'mutlu'],
    [7000,  6200,           'mutlu'],
    [3400,  7000,           'mutlu değil'],
    [4500,  5600,           'mutlu değil'],
    [2850,  4000,           'mutlu değil'],
    [6000,  3000,           'mutlu'],
    [7000,  6200,           'mutlu'],
    [3400,  7000,           'mutlu değil'],
    [4500,  5600,           'mutlu değil'],
    [2850,  4000,           'mutlu değil'],
    [5500,  3000,           'mutlu']
])

# Kullanıcıdan x1 ve x2 değerlerinini alıyoruz
x1_yeni = float(input("Maaş değerini girin: "))
x2_yeni = float(input("Maaş Beklenti değerini girin: "))

# k-NN algoritması için k-değeri 3 olarak seçildi bunun sebebi istenen verilerin hangi sınıfa ait
#olduğunu belirlemek için
k_degeri = 3  # Kullanılacak komşu sayısı

# Öklid uzaklığı hesaplanır.
uzakliklar = np.sqrt(np.sum((veriler[:, :2].astype(float) - np.array([x1_yeni, x2_yeni]))**2, axis=1))

# Uzaklıkları küçükten büyüğe sıralama ve indisleri alma
sirali_indisler = np.argsort(uzakliklar)

# K en yakın komşuların sınıflarını sayısal bir türe dönüştürme
k_en_yakin_siniflar = np.where(veriler[sirali_indisler[:k_degeri], 2] == 'mutlu', 1, 0)

# Sınıflar arasındaki frekansları sayma
sinif_frekanslari = np.bincount(k_en_yakin_siniflar)

# En çok tekrar eden sınıfı bulma
en_cok_tekrar_edilen_sinif = np.argmax(sinif_frekanslari)

print(f"Girdiğiniz değerler ({x1_yeni}, {x2_yeni}) için tahmin edilen sınıf: {'mutlu' if en_cok_tekrar_edilen_sinif else 'mutlu değil'}")
